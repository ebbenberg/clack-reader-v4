### ESP32 S3 used is a M5stack Atom S3 lite

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 8MB
## Atom S3 lite  
  framework:
    type: esp-idf
    version: recommended
    # Custom sdkconfig options
    sdkconfig_options:
      COMPILER_OPTIMIZATION_SIZE: y
      CONFIG_BT_ENABLED: n

i2c:
## use I2C bus external, not on ESP GPIO1 and GPIO2
  - id: bus_a
    sda: GPIO6  
    scl: GPIO5  
    scan: false
    frequency: 400kHz

binary_sensor:
## temporary test button for testing water meter pulse
  - id: clack_use_test_button
#    name: Test button use pulse
    platform: template
    internal: true
    filters:
      - delayed_on_off: 50ms
    on_press:
      then:
        - if:
            condition:
              lambda: 'return id(water_meter_freeze) == false;'
            then:
              - sensor.template.publish:
                  id: clack_watermeter
                  state: !lambda |-
                    return id(totalWaterUsage) += 0.1;
              - lambda: |-
                  ESP_LOGI("UseTest", "Use button pressed");

  - platform: template
    name: Block regen
    id: init_state
    internal: false
    lambda: |-
      if (id(wait_on_delay)) {
        return true;
      } else {
        return false;
      }


# ## temporary test button for testing regeneration pulse
switch:
  # Chlorinator Relay
  - platform: gpio
    pin:
      number: GPIO8
      inverted: false
    name: ${clack_chlorinator}
    id: chlorinator_relay
    icon: mdi:bacteria
    entity_category: config

button:
  - platform: template
    name: ${clack_use_tst_but}
    id: clack_use_tst_but
    on_press:
      then:
        - lambda: |-
            id(clack_use_test_button).publish_state(true);
        - delay: 100ms
        - lambda: |-
            id(clack_use_test_button).publish_state(false);

  - platform: template
    name: ${clack_resinclean_reset_button}
    id: clack_resinclean_reset_button
    on_press:
      - globals.set:
          id: resinclean_last
          value: !lambda |-
            return id(sntp_time).now().timestamp;
      - text_sensor.template.publish:
          id: clack_resinclean_last
          state: !lambda |-
            char str[32];
            time_t currTime = id(sntp_time).now().timestamp;
            strftime(str, sizeof(str), "%a %d %b %H:%M", localtime(&currTime));
            id(resinclean_date_last) = str;
            return  { str };
      - component.update: time_to_resinclean #set down counter

  - platform: template
    name: ${clack_reset_but_last_dist}
    id: clack_reset_but_last_dist
    on_press:
      then:
        - globals.set:
            id: last_distance
            value: !lambda |-
              return id(distance_cm).state;
        - sensor.template.publish:
            id: clack_distance
            state: !lambda |-
              return id(last_distance_cm).state;
        - text_sensor.template.publish:
            id: clack_saltfill_last
            state: !lambda |-
              char str[32];
              time_t currTime = id(sntp_time).now().timestamp;
              strftime(str, sizeof(str), "%a %d %b %H:%M", localtime(&currTime));
              id(fill_last) = str;
              return  { str };

  - platform: template
    name: ${clack_regen_stop_script}
    id: clack_regen_stop_script
    on_press:
      then:
        - script.stop: cycle_steps_post_upflow
        - script.stop: cycle_steps_pre_upflow
        - script.stop: cycle_steps_post_downflow
        - script.stop: cycle_steps_pre_downflow
        - text_sensor.template.publish:
            id: clack_cycle_step
            state: !lambda |-
              return id(cycle_step) = "Idle";
        - lambda: |-
            id(start_time) = 0;
        - lambda: |-
            id(start_time_total) = 0;
        - component.update: timer1
        - component.update: timer2
        - lambda: 'id(wait_on_delay) = false;'
        - lambda: 'id(water_meter_freeze) = false;'
